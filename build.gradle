plugins {
	id 'fabric-loom' version '1.5-SNAPSHOT'
	id 'maven-publish'
	id 'com.modrinth.minotaur' version '2.+' // Modrinth publishing plugin
	id 'net.darkhax.curseforgegradle' version '1.1.18' // CurseForge publishing plugin
	id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin'  version '2.1.2' // Changelog generation plugin
}

version = project.mod_version
group = project.mod_group_id

base {
	archivesName = "CreativeTabSearch-${mod_api}-${minecraft_version}"
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven {
		name = 'Parchment'
		url = 'https://maven.parchmentmc.org'
	}
}

loom {
    splitEnvironmentSourceSets()

	mods {
		"modid" {
			sourceSet sourceSets.client
		}
	}

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.layered() {
		officialMojangMappings()
		// Use parchment mappings. NOTE: Parchment maven must be manually added. (https://maven.parchmentmc.org)
		parchment("org.parchmentmc.data:parchment-${project.parchment_minecraftVersion}:${project.parchment_mappingsVersion}@zip")
	}
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
	// Uncomment the following line to enable the deprecated Fabric API modules. 
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand([
				"mod_id": project.mod_id,
				"mod_version": project.mod_version,
				"mod_name": project.mod_name,
				"mod_license": project.mod_license,
				"mod_description": project.mod_description,
				"mod_authors": project.mod_authors,
				"mod_fabricloader_version_range_floor": project.mod_fabricloader_version_range_floor,
				"mod_minecraft_version_range_floor": project.mod_minecraft_version_range_floor,
				"mod_minecraft_version_range_ceil": project.mod_minecraft_version_range_ceil,
				"minecraft_version": project.minecraft_version
		])
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
		maven {
			url "file://${project.projectDir}/repo"
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

def modAPIReadable = [
		'neo': "NeoForge",
		'forge': "Forge",
		'fabric': "Fabric",
		'quilt': "Quilt"
]
def modAPILoader = [
		'neo': "neoforge",
		'forge': "forge",
		'fabric': "fabric",
		'quilt': "quilt"
]

def releaseVersionName = "${mod_version} for ${modAPIReadable[mod_api]} ${minecraft_version}"

// Modrinth
modrinth {
	token = System.getenv("BUILD_MODRINTH_TOKEN") // Remember to have the MODRINTH_TOKEN environment variable set or else this will fail - just make sure it stays private!
	projectId = modrinth_projectId // This can be the project ID or the slug. Either will work!
	versionNumber = mod_version // You don't need to set this manually. Will fail if Modrinth has this version already
	versionName = releaseVersionName
	versionType = "release" // This is the default -- can also be `beta` or `alpha`
	uploadFile = jar // With Loom, this MUST be set to `remapJar` instead of `jar`!
	gameVersions = publish_minecraft_versions.split(',').toList() // Must be an array, even with only one version
	loaders = [modAPILoader[mod_api]] // Must also be an array - no need to specify this if you're using Loom or ForgeGradle
	changelog.set(provider {
		buildDir.toPath().resolve('changelog.md').toFile().text
	} as Provider<? extends String>)
	dependencies {
		required.project 'fabric-api' // Requires Fabric API.
	}
}

// CurseForge
import net.darkhax.curseforgegradle.TaskPublishCurseForge
import net.darkhax.curseforgegradle.Constants as CFG_Constants

tasks.register('publishCurseForge', TaskPublishCurseForge) {
	// This token is used to authenticate with CurseForge. It should be handled
	// with the same level of care and security as your actual password. You
	// should never share your token with an untrusted source or publish it
	// publicly to GitHub or embed it within a project. The best practice is to
	// store this token in an environment variable or a build secret.
	apiToken = System.getenv("BULLD_CURSEFORGE_API_KEY")

	// Tells CurseForgeGradle to publish the output of the jar task. This will
	// return a UploadArtifact object that can be used to further configure the
	// file.
	def mainFile = upload(curseforge_projectId, jar)
	mainFile.displayName = "CreativeTabSearch-${mod_api}-${minecraft_version}-${mod_version}.jar"
	mainFile.releaseType = CFG_Constants.RELEASE_TYPE_RELEASE
	mainFile.addModLoader(modAPILoader[mod_api])
	publish_minecraft_versions.split(',').toList().forEach { version ->
		mainFile.addGameVersion(version)
	}
	mainFile.addRelation('306612', CFG_Constants.RELATION_REQUIRED) // Requires Fabric API.
}

// Git changelog generation
import se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask

def previousVersionCommit = System.getenv("BUILD_PREVIOUS_VERSION_COMMIT")
if (previousVersionCommit == null) {
	previousVersionCommit = "HEAD~5"
	logger.warn("Environment variable BUILD_PREVIOUS_VERSION_COMMIT is missing! Using the default value: ${previousVersionCommit}")
}

tasks.register('genMarkdownChangelog', GitChangelogTask) {
	fromRepo = projectDir.absolutePath.toString()
	file = buildDir.toPath().resolve('changelog.md').toFile()
	untaggedName = releaseVersionName
	fromCommit = previousVersionCommit
	toRef = "HEAD"
	templateContent = projectDir.toPath().resolve('changelog').resolve('changelog-markdown.mustache').toFile().text
}

tasks.modrinth.dependsOn(tasks.genMarkdownChangelog)
tasks.publishCurseForge.dependsOn(tasks.genMarkdownChangelog)
